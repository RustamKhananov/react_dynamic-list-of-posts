{"version":3,"sources":["helpers.tsx","User.tsx","CommentsList.tsx","Post.tsx","ListOfPosts.tsx","App.tsx","api.tsx","index.tsx"],"names":["timeout","User","props","user","name","email","address","suite","street","city","CommentsList","commentsList","map","comment","key","id","body","Post","post","title","ListOfPosts","posts","App","useState","loadButtonText","setLoadButtonText","isLoadButtonVisible","setIsLoadButtonVisible","customisedPosts","setCustomisedPosts","filterFieldValue","setFilterFieldValue","isFilterFieldVisible","setIsFilterFieldVisible","filteredPosts","setFilteredPosts","useEffect","func","delay","filter","includes","clearTimeout","setTimeout","type","className","onClick","Promise","all","fetch","then","response","json","commentsFromServer","postsFromServer","usersFromServer","find","userId","postId","placeholder","value","onChange","event","target","length","ReactDOM","render","document","getElementById"],"mappings":"iLAAIA,E,8CCKSC,G,MAAgC,SAACC,GAAW,IAAD,EACrBA,EAAMC,KAA/BC,EAD8C,EAC9CA,KAAMC,EADwC,EACxCA,MAAOC,EADiC,EACjCA,QAErB,OACE,oCACE,gCAASF,GADX,OAGE,8BAAOC,GAHT,OAKE,8BACGC,EAAQC,MACRD,EAAQE,OACRF,EAAQG,SCbJC,EAAgD,SAACR,GAC5D,OACE,4BACE,6BACCA,EAAMS,aAAaC,KAAI,SAACC,GAAD,OACtB,wBAAIC,IAAKD,EAAQE,IACf,8BAAOF,EAAQG,MACf,6BACA,gCAASH,EAAQT,MAChB,IAJH,OAME,8BAAOS,EAAQR,aCTZY,EAAgC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC9C,OACE,oCACE,6BACE,4BACE,gCACGA,EAAKC,QAGV,2BAAID,EAAKF,MACT,kBAAC,EAAD,CACEb,KAAMe,EAAKf,QAIf,kBAAC,EAAD,CACEQ,aAAcO,EAAKP,iBChBdS,EAA8C,SAAClB,GAC1D,OACE,4BAEIA,EAAMmB,MAAMT,KAAI,SAACM,GAAD,OACd,wBAAIJ,IAAKI,EAAKH,IACZ,kBAAC,EAAD,CACEG,KAAMA,UCkELI,EAvEW,WAAO,IAAD,EACcC,mBAAS,QADvB,mBACvBC,EADuB,KACPC,EADO,OAEwBF,oBAAS,GAFjC,mBAEvBG,EAFuB,KAEFC,EAFE,OAGgBJ,mBAAS,IAHzB,mBAGvBK,EAHuB,KAGNC,EAHM,OAIkBN,mBAAS,IAJ3B,mBAIvBO,EAJuB,KAILC,EAJK,OAK0BR,oBAAS,GALnC,mBAKvBS,EALuB,KAKDC,EALC,OAMYV,mBAAS,IANrB,mBAMvBW,EANuB,KAMRC,EANQ,KAS9BC,qBAAU,WLfY,IAACC,EAAkBC,EAAlBD,EKgBZ,WACPF,EAAiBP,EAAgBW,QAAO,SAACrB,GACvC,OACEA,EAAKC,MAAMqB,SAASV,IACjBZ,EAAKF,KAAKwB,SAASV,QLpBWQ,EKuBpC,ILtBLG,aAAazC,GACbA,EAAU0C,WAAWL,EAAMC,KKsBxB,CAACR,EAAkBF,IAuBtB,OACE,oCACE,qDACA,4BACEe,KAAK,SACLC,UAAWlB,EAAsB,GAAK,aACtCmB,QA1BwB,WAC5BpB,EAAkB,cAGlBqB,QAAQC,IAAI,CCzBdC,MAAM,iDAAiDC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UANlFH,MAAM,8CAA8CC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAG/EH,MAAM,8CAA8CC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,YD6B1EF,MAAK,YAA6D,IAAD,mBAA1DG,EAA0D,KAAtCC,EAAsC,KAArBC,EAAqB,KAChEzB,EAAmBwB,EAAgBzC,KAAI,SAACM,GACtC,OAAO,2BACFA,GADL,IAEEf,KAAMmD,EAAgBC,MAAK,SAACpD,GAAD,OAAoBA,EAAKY,KAAOG,EAAKsC,UAChE7C,aAAcyC,EACXb,QAAO,SAAC1B,GAAD,OAAsBA,EAAQ4C,SAAWvC,EAAKH,YAG5DoB,EAAiBP,GACjBK,GAAwB,GACxBN,GAAuB,QAYtBH,GAEH,2BACEkC,YAAY,2BACZf,KAAK,OACLgB,MAAO7B,EACP8B,SAAU,SAACC,GACT9B,EAAoB8B,EAAMC,OAAOH,QAEnCf,UAAWZ,EAAuB,GAAK,eAEb,IAA3BJ,EAAgBmC,QAEb,kBAAC,EAAD,CACE1C,MAAOa,MElEnB8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.c57211d2.chunk.js","sourcesContent":["let timeout: NodeJS.Timeout;\n\nexport const debounce = (func: () => void, delay: number) => {\n  clearTimeout(timeout);\n  timeout = setTimeout(func, delay);\n};\n","\nimport React from 'react';\nimport { UserPropsType } from './interfaces';\n\n\nexport const User: React.FC<UserPropsType> = (props) => {\n  const { name, email, address } = props.user;\n\n  return (\n    <>\n      <strong>{name}</strong>\n      &nbsp;\n      <span>{email}</span>\n      &nbsp;\n      <span>\n        {address.suite}\n        {address.street}\n        {address.city}\n      </span>\n\n    </>\n  );\n};\n","\nimport React from 'react';\nimport { CommentsListPropsType, Comment } from './interfaces';\n\nexport const CommentsList: React.FC<CommentsListPropsType> = (props) => {\n  return (\n    <ul>\n      <br />\n      {props.commentsList.map((comment: Comment) => (\n        <li key={comment.id}>\n          <span>{comment.body}</span>\n          <br />\n          <strong>{comment.name}</strong>\n          {' '}\n          &nbsp;\n          <span>{comment.email}</span>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","\nimport React from 'react';\nimport { User } from './User';\nimport { PostPropsType } from './interfaces';\nimport { CommentsList } from './CommentsList';\n\nexport const Post: React.FC<PostPropsType> = ({ post }) => {\n  return (\n    <>\n      <div>\n        <h2>\n          <strong>\n            {post.title}\n          </strong>\n        </h2>\n        <p>{post.body}</p>\n        <User\n          user={post.user}\n        />\n      </div>\n\n      <CommentsList\n        commentsList={post.commentsList}\n      />\n\n    </>\n  );\n};\n","\nimport React from 'react';\nimport { Post } from './Post';\nimport { ListOfPostsPropsType, CustomisedPostType } from './interfaces';\n\n\nexport const ListOfPosts: React.FC<ListOfPostsPropsType> = (props) => {\n  return (\n    <ul>\n      {\n        props.posts.map((post: CustomisedPostType) => (\n          <li key={post.id}>\n            <Post\n              post={post}\n            />\n          </li>\n        ))\n      }\n    </ul>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { getCommentsFromServer, getPostsFromServer, getUsersFromServer } from './api';\nimport { PostType, UserType, Comment } from './interfaces';\nimport { ListOfPosts } from './ListOfPosts';\nimport { debounce } from './helpers';\n\n\nconst App: React.FC<{}> = () => {\n  const [loadButtonText, setLoadButtonText] = useState('Load');\n  const [isLoadButtonVisible, setIsLoadButtonVisible] = useState(true);\n  const [customisedPosts, setCustomisedPosts] = useState([]);\n  const [filterFieldValue, setFilterFieldValue] = useState('');\n  const [isFilterFieldVisible, setIsFilterFieldVisible] = useState(false);\n  const [filteredPosts, setFilteredPosts] = useState([]);\n\n\n  useEffect(() => {\n    debounce(() => {\n      setFilteredPosts(customisedPosts.filter((post: PostType) => {\n        return (\n          post.title.includes(filterFieldValue)\n          || post.body.includes(filterFieldValue)\n        );\n      }));\n    }, 1000);\n  }, [filterFieldValue, customisedPosts]);\n\n\n  const handleLoadButtonClick = (): void => {\n    setLoadButtonText('Loading...');\n\n\n    Promise.all([getCommentsFromServer(), getPostsFromServer(), getUsersFromServer()])\n      .then(([commentsFromServer, postsFromServer, usersFromServer]) => {\n        setCustomisedPosts(postsFromServer.map((post: PostType) => {\n          return {\n            ...post,\n            user: usersFromServer.find((user: UserType) => user.id === post.userId),\n            commentsList: commentsFromServer\n              .filter((comment: Comment) => comment.postId === post.id),\n          };\n        }));\n        setFilteredPosts(customisedPosts);\n        setIsFilterFieldVisible(true);\n        setIsLoadButtonVisible(false);\n      });\n  };\n\n  return (\n    <>\n      <h1>Dynamic list of posts</h1>\n      <button\n        type=\"button\"\n        className={isLoadButtonVisible ? '' : 'un-visible'}\n        onClick={handleLoadButtonClick}\n      >\n        {loadButtonText}\n      </button>\n      <input\n        placeholder=\"Enter text for filtering\"\n        type=\"text\"\n        value={filterFieldValue}\n        onChange={(event) => {\n          setFilterFieldValue(event.target.value);\n        }}\n        className={isFilterFieldVisible ? '' : 'un-visible'}\n      />\n      {customisedPosts.length !== 0\n        && (\n          <ListOfPosts\n            posts={filteredPosts}\n          />\n        )}\n    </>\n  );\n};\n\n\nexport default App;\n","\nexport const getPostsFromServer = () => (\n  fetch('https://jsonplaceholder.typicode.com/posts').then((response => response.json()))\n);\nexport const getUsersFromServer = () => (\n  fetch('https://jsonplaceholder.typicode.com/users').then((response => response.json()))\n);\nexport const getCommentsFromServer = () => (\n  fetch('https://jsonplaceholder.typicode.com/comments').then((response => response.json()))\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}