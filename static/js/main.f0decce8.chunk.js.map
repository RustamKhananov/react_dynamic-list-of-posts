{"version":3,"sources":["helpers.tsx","User.tsx","CommentsList.tsx","Post.tsx","ListOfPosts.tsx","App.tsx","api.tsx","index.tsx"],"names":["timeout","User","props","name","email","address","suite","street","city","CommentsList","commentsList","map","comment","key","id","body","Post","user","post","title","username","ListOfPosts","posts","users","filter","userId","comments","postId","App","useState","loadButtonText","setLoadButtonText","isLoadButtonVisible","setIsLoadButtonVisible","setComments","isCommentsLoaded","setIsCommentsLoaded","setPosts","isPostsLoaded","setIsPostsLoaded","setUsers","isUsersLoaded","setIsUsersLoaded","filterFieldValue","setFilterFieldValue","isFilterFieldVisible","setIsFilterFieldVisible","filteredPosts","setFilteredPosts","useEffect","func","delay","includes","clearTimeout","setTimeout","type","className","onClick","fetch","then","response","json","commentsFromServer","postsFromServer","usersFromServer","placeholder","value","onChange","event","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0decce8.chunk.js","sourcesContent":["let timeout: NodeJS.Timeout;\n\nexport const debounce = (func: () => void, delay: number) => {\n  clearTimeout(timeout);\n  timeout = setTimeout(func, delay);\n};\n","\nimport React from 'react';\nimport { UserType } from './interfaces';\n\n\nexport const User: React.FC<UserType> = (props) => {\n  const { name, email, address } = props;\n\n  return (\n    <>\n      <strong>{name}</strong>\n      &nbsp;\n      <span>{email}</span>\n      &nbsp;\n      <span>\n        {address.suite}\n        {address.street}\n        {address.city}\n      </span>\n\n    </>\n  );\n};\n","\nimport React from 'react';\nimport { CommentsListPropsType, Comment } from './interfaces';\n\nexport const CommentsList: React.FC<CommentsListPropsType> = (props) => {\n  return (\n    <ul>\n      <br />\n      {props.commentsList.map((comment: Comment) => (\n        <li key={comment.id}>\n          <span>{comment.body}</span>\n          <br />\n          <strong>{comment.name}</strong>\n          {' '}\n          &nbsp;\n          <span>{comment.email}</span>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","\nimport React from 'react';\nimport { User } from './User';\nimport { PostPropsType } from './interfaces';\nimport { CommentsList } from './CommentsList';\n\nexport const Post: React.FC<PostPropsType> = ({ user, commentsList, post }) => {\n  return (\n    <>\n      <div>\n        <h2>\n          <strong>\n            {post.title}\n          </strong>\n        </h2>\n        <p>{post.body}</p>\n        <User\n          id={user[0].id}\n          name={user[0].name}\n          username={user[0].username}\n          email={user[0].email}\n          address={user[0].address}\n        />\n      </div>\n\n      <CommentsList\n        commentsList={commentsList}\n      />\n\n    </>\n  );\n};\n","\nimport React from 'react';\nimport { Post } from './Post';\nimport { ListOfPostsPropsType, PostType } from './interfaces';\n\n\nexport const ListOfPosts: React.FC<ListOfPostsPropsType> = (props) => {\n  return (\n    <ul>\n      {\n        props.posts.map((post: PostType) => (\n          <li key={post.id}>\n            <Post\n              user={props.users.filter(user => user.id === post.userId)}\n              post={post}\n              commentsList={props.comments.filter(comment => comment.postId === post.id)}\n            />\n          </li>\n        ))\n      }\n\n    </ul>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { getCommentsFromServer, getPostsFromServer, getUsersFromServer } from './api';\nimport { PostType } from './interfaces';\nimport { ListOfPosts } from './ListOfPosts';\nimport { debounce } from './helpers';\n\n\nconst App: React.FC<{}> = () => {\n  const [loadButtonText, setLoadButtonText] = useState('Load');\n  const [isLoadButtonVisible, setIsLoadButtonVisible] = useState(true);\n  const [comments, setComments] = useState([]);\n  const [isCommentsLoaded, setIsCommentsLoaded] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [isPostsLoaded, setIsPostsLoaded] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [isUsersLoaded, setIsUsersLoaded] = useState(false);\n  const [filterFieldValue, setFilterFieldValue] = useState('');\n  const [isFilterFieldVisible, setIsFilterFieldVisible] = useState(false);\n  const [filteredPosts, setFilteredPosts] = useState([]);\n\n\n  useEffect(() => {\n    debounce(() => {\n      setFilteredPosts(posts.filter((post: PostType) => {\n        return (\n          post.title.includes(filterFieldValue)\n          || post.body.includes(filterFieldValue)\n        );\n      }));\n    }, 1000);\n  }, [filterFieldValue, posts]);\n\n\n  const handleLoadButtonClick = (): void => {\n    setLoadButtonText('Loading...');\n    setIsLoadButtonVisible(false);\n    setIsFilterFieldVisible(true);\n    getCommentsFromServer().then((commentsFromServer) => {\n      setComments(commentsFromServer);\n      setIsCommentsLoaded(true);\n    });\n\n    getPostsFromServer().then(postsFromServer => {\n      setPosts(postsFromServer);\n      setIsPostsLoaded(true);\n      setFilteredPosts(postsFromServer);\n    });\n\n    getUsersFromServer().then(usersFromServer => {\n      setUsers(usersFromServer);\n      setIsUsersLoaded(true);\n    });\n  };\n\n  return (\n    <>\n      <h1>Dynamic list of posts</h1>\n      <button\n        type=\"button\"\n        className={isLoadButtonVisible ? '' : 'un-visible'}\n        onClick={handleLoadButtonClick}\n      >\n        {loadButtonText}\n      </button>\n      <input\n        placeholder=\"Enter text for filtering\"\n        type=\"text\"\n        value={filterFieldValue}\n        onChange={(event) => {\n          setFilterFieldValue(event.target.value);\n        }}\n        className={isFilterFieldVisible ? '' : 'un-visible'}\n      />\n      {isPostsLoaded\n        && isCommentsLoaded\n        && isUsersLoaded\n        && (\n          <ListOfPosts\n            posts={filteredPosts}\n            comments={comments}\n            users={users}\n          />\n        )}\n    </>\n  );\n};\n\n\nexport default App;\n","\nexport const getPostsFromServer = () => (\n  fetch('https://jsonplaceholder.typicode.com/posts').then((response => response.json()))\n);\nexport const getUsersFromServer = () => (\n  fetch('https://jsonplaceholder.typicode.com/users').then((response => response.json()))\n);\nexport const getCommentsFromServer = () => (\n  fetch('https://jsonplaceholder.typicode.com/comments').then((response => response.json()))\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}